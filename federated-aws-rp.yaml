AWSTemplateFormatVersion: 2010-09-09
Description: Lambda function and API Gateway which allow a user to access the AWS
  web console via OIDC federated login
Metadata:
  Source: https://github.com/mozilla-iam/federated-aws-rp/blob/master/federated-aws-rp.yaml
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: OpenID Connect
      Parameters:
      - ClientId
      - DiscoveryUrl
    - Label:
        default: API
      Parameters:
      - CustomDomainName
      - DomainNameZone
      - CertificateArn
    - Label:
        default: Services
      Parameters:
      - IdTokenForRolesUrl
    ParameterLabels:
      ClientId:
        default: Client ID issued by the identity provider
      DiscoveryUrl:
        default: The OpenID Connect Discovery URL of the identity provider
      CustomDomainName:
        default: Custom DNS Domain Name
      DomainNameZone:
        default: DNS Zone containing the Custom DNS Domain Name
      CertificateArn:
        default: AWS ACM Certificate ARN for the Custom DNS Domain Name
      IdTokenForRolesUrl:
        default: The URL of the ID Token for Roles API
Parameters:
  ClientId:
    Type: String
    Description: OIDC Application/Client Client ID
  DiscoveryUrl:
    Type: String
    Description: The URL to the OIDC discovery endpoint for the identity provider
    Default: ''
  CustomDomainName:
    Type: String
    Description: The custom domain name to use for the API
    Default: ''
    # AWS::ApiGateway::DomainName can not contain any uppercase characters
    AllowedPattern: '^[^A-Z]*$'
    ConstraintDescription: must not contain any uppercase characters
  DomainNameZone:
    Type: String
    Description: The Route53 DNS zone containing the custom domain name
    Default: ''
    # TODO : Add a constraint to ensure this ends in a period (or is blank)
  CertificateArn:
    Type: String
    Description: The ARN of the AWS ACM Certificate for your custom domain name
    Default: ''
  IdTokenForRolesUrl:
    Type: String
    Description: The URL of the ID Token for Roles API
Conditions:
  UseCustomDomainName: !Not [ !Equals [ !Ref 'CustomDomainName', '' ] ]
Rules:
  DomainNameAndCertificateArnProvided:
    RuleCondition: !Or [ !Not [ !Equals [ !Ref 'CustomDomainName', '' ] ], !Not [ !Equals [ !Ref 'DomainNameZone', '' ] ], !Not [ !Equals [ !Ref 'CertificateArn', '' ] ] ]
    Assertions:
      - Assert: !And [ !Not [ !Equals [ !Ref 'CustomDomainName', '' ] ], !Not [ !Equals [ !Ref 'DomainNameZone', '' ] ], !Not [ !Equals [ !Ref 'CertificateArn', '' ] ] ]
        AssertDescription: If you set a CustomDomainName, DomainNameZone or CertificateArn you must provide all values
Resources:
  AwsFederatedRpFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowLambdaLogging
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      - PolicyName: AllowAssumeRoleWithWebIdentity
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRoleWithWebIdentity
              Resource:
                - '*'
  AwsFederatedRpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS Federated login website / relying party
      Code: build/
      Environment:
        Variables:
          CLIENT_ID: !Ref ClientId
          DISCOVERY_URL: !Ref DiscoveryUrl
          DOMAIN_NAME: !Ref CustomDomainName  # What if a domain name isn't provided?
          LOG_LEVEL: INFO
          ID_TOKEN_FOR_ROLES_URL: !Ref IdTokenForRolesUrl
      Handler: federated_aws_rp.app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt AwsFederatedRpFunctionRole.Arn
      Tags:
      - Key: application
        Value: federated-aws-rp
      - Key: stack
        Value: !Ref AWS::StackName
      - Key: source
        Value: https://github.com/mozilla-iam/federated-aws-rp/
      Timeout: 900
  AwsFederatedRpFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      # Let's hope that the Lambda function doesn't execute before this LogGroup
      # resource is created, creating the LogGroup with no expiration and
      # preventing this resource from creating
      LogGroupName: !Join [ '/', ['/aws/lambda', !Ref 'AwsFederatedRpFunction' ] ]
      RetentionInDays: 14
  AwsFederatedRpRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomainName
    Properties:
      AliasTarget:
        DNSName: !GetAtt AwsFederatedRpCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html
      Comment: Bind the custom domain name to the AwsFederatedRp CloudFront fronted API Gateway
      HostedZoneName: !Ref DomainNameZone
      Name: !Ref CustomDomainName
      Type: A
  AwsFederatedRpApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AwsFederatedRp
      # https://forums.aws.amazon.com/message.jspa?messageID=773429
      BinaryMediaTypes:
        # Despite what the AWS documentation says, this value should *not* be '*~1*' as that doesn't work
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html#cfn-apigateway-restapi-binarymediatypes
        - '*/*'
      Description: AWS Federated login website / relying party
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
        - REGIONAL
  AwsFederatedRpApiGatewayDomainName:
    # The ApiGateway requires a custom domain name, despite sitting behind
    # CloudFront. This is because we want to pass all ( * ) HTTP headers
    # through CloudFront and onto API Gateway. If we didn't set a custom domain
    # name on the API Gateway, the "Host" header passed through from CloudFront
    # to API Gateway would be for the custom domain, but API Gateway, which uses
    # SNI, wouldn't know which TLS certificate to use in the handshake because
    # API Gateway would have no record of that Host header. This would result in
    # API Gateway being unable to setup a TLS connection with the inbound
    # CloudFront connection attempt, API Gateway writing no logs about this
    # fact, and CloudFront returning to the user an error of
    # {"message":"Forbidden"}
    # If we weren't passing the "Host" header from CloudFront to API Gateway
    # this resource wouldn't be needed
    Type: AWS::ApiGateway::DomainName
    Properties:
      # Uppercase letters are not supported in DomainName
      DomainName: !Ref CustomDomainName
      EndpointConfiguration:
        Types:
        - REGIONAL
      RegionalCertificateArn: !Ref CertificateArn
      SecurityPolicy: TLS_1_2
      Tags:
      - Key: application
        Value: federated-aws-rp
      - Key: stack
        Value: !Ref AWS::StackName
      - Key: source
        Value: https://github.com/mozilla-iam/federated-aws-rp/
  AwsFederatedRpBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      # BasePath:   # Not specifying this so that we have no base path
      DomainName: !Ref AwsFederatedRpApiGatewayDomainName
      RestApiId: !Ref AwsFederatedRpApi
      Stage: !Ref AwsFederatedRpApiStage
  AwsFederatedRpLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt AwsFederatedRpFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ '', [ 'arn:aws:execute-api:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref 'AwsFederatedRpApi', '/*/*' ] ]
  AwsFederatedRpApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref AwsFederatedRpApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: '*'
        # LoggingLevel: INFO
        ResourcePath: /*
      RestApiId: !Ref AwsFederatedRpApi
      Tags:
        - Key: application
          Value: federated-aws-rp
        - Key: stack
          Value: !Ref AWS::StackName
        - Key: source
          Value: https://github.com/mozilla-iam/federated-aws-rp/
      # Description: x
      # StageName: LATEST
  AwsFederatedRpApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - AwsFederatedRpRequest
    Properties:
      RestApiId: !Ref AwsFederatedRpApi
      StageName: DummyStage
      # Deployment with an Empty Embedded Stage
      # The following instructional text is no longer present in the AWS
      # documentation for AWS::ApiGateway::Deployment StageName and it's not
      # clear if it still applies.
      #
      # "Note This property is required by API Gateway. We recommend that you
      # specify a name using any value (see Examples) and that you don’t use
      # this stage. We recommend not using this stage because it is tied to
      # this deployment, which means you can’t delete one without deleting the
      # other. For example, if you delete this deployment, API Gateway also
      # deletes this stage, which you might want to keep. Instead, use the
      # AWS::ApiGateway::Stage resource to create and associate a stage with
      # this deployment."
  AwsFederatedRpResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AwsFederatedRpApi
      ParentId: !GetAtt AwsFederatedRpApi.RootResourceId
      PathPart: '{proxy+}'
  AwsFederatedRpRequest:
    DependsOn: AwsFederatedRpLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        # IntegrationHttpMethod is POST regardless of the HttpMethod for this resource
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#set-up-lambda-proxy-integration-using-cli
        # "For Lambda integrations, you must use the HTTP method of POST for the
        # integration request, according to the specification of the Lambda service
        # action for function invocations."
        IntegrationHttpMethod: POST
        Uri: !Join [ '', [ 'arn:aws:apigateway:', !Ref 'AWS::Region', ':lambda:path/2015-03-31/functions/', !GetAtt 'AwsFederatedRpFunction.Arn', '/invocations' ] ]
      ResourceId: !Ref AwsFederatedRpResource
      RestApiId: !Ref AwsFederatedRpApi
  AwsFederatedRpPOSTRequest:
    DependsOn: AwsFederatedRpLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#set-up-lambda-proxy-integration-using-cli
        # "For Lambda integrations, you must use the HTTP method of POST for the
        # integration request, according to the specification of the Lambda service
        # action for function invocations."
        IntegrationHttpMethod: POST
        Uri: !Join [ '', [ 'arn:aws:apigateway:', !Ref 'AWS::Region', ':lambda:path/2015-03-31/functions/', !GetAtt 'AwsFederatedRpFunction.Arn', '/invocations' ] ]
      ResourceId: !Ref AwsFederatedRpResource
      RestApiId: !Ref AwsFederatedRpApi
  AwsFederatedRpRootRequest:
    # This resource is necessary to get API Gateway to respond to requests for the '/' path
    # Without it API Gateway will respond to requests for '/' with the error
    # {"message":"Missing Authentication Token"}
    # https://stackoverflow.com/q/46578615/168874
    # https://stackoverflow.com/q/52909329/168874
    DependsOn: AwsFederatedRpLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        # IntegrationHttpMethod is POST regardless of the HttpMethod for this resource
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#set-up-lambda-proxy-integration-using-cli
        # "For Lambda integrations, you must use the HTTP method of POST for the
        # integration request, according to the specification of the Lambda service
        # action for function invocations."
        IntegrationHttpMethod: POST
        Uri: !Join [ '', [ 'arn:aws:apigateway:', !Ref 'AWS::Region', ':lambda:path/2015-03-31/functions/', !GetAtt 'AwsFederatedRpFunction.Arn', '/invocations' ] ]
      # ResourceId must use the RootResourceId attribute of the AWS::ApiGateway::RestApi
      # https://stackoverflow.com/a/56121914/168874
      ResourceId: !GetAtt AwsFederatedRpApi.RootResourceId
      RestApiId: !Ref AwsFederatedRpApi
  AwsFederatedRpCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: UseCustomDomainName
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref CustomDomainName
        Comment: !Join [ ':', [!Ref 'AWS::StackName', 'AWS Federated RP CloudFront distribution']]
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - POST
          - DELETE
          - OPTIONS
          - PUT
          - PATCH
          Compress: true
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
            Headers:
            - '*'
          TargetOriginId: AwsFederatedRpCloudFrontOriginId
          ViewerProtocolPolicy: redirect-to-https
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-defaultrootobject
        DefaultRootObject: ''  # "If you don't want to specify a default root object when you create a distribution, include an empty DefaultRootObject element."
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        #Logging:
        #  Logging
        Origins:
        - CustomOriginConfig:
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
              - TLSv1.2
          DomainName: !GetAtt AwsFederatedRpApiGatewayDomainName.RegionalDomainName
          Id: AwsFederatedRpCloudFrontOriginId
          # OriginPath: !Join [ '', [ '/', !Ref 'AwsFederatedRpApiStage' ] ]
        PriceClass: PriceClass_100  # US, Canada, Europe, Israel
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      Tags:
      - Key: application
        Value: federated-aws-rp
      - Key: stack
        Value: !Ref AWS::StackName
      - Key: source
        Value: https://github.com/mozilla-iam/federated-aws-rp/
Outputs:
  AwsFederatedRpUrl:
    Description: The URL of the AWS Federated RP
    Value:
      Fn::If:
      - UseCustomDomainName
      - !Join [ '', [ 'https://', !Ref 'CustomDomainName', '/'] ]
      - !Join [ '', [ 'https://', !Ref 'AwsFederatedRpApi', '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'AwsFederatedRpApiStage', '/' ] ]
  RegionalDomainName:
    Description: AwsFederatedRpApiGatewayDomainName.RegionalDomainName
    Value: !GetAtt AwsFederatedRpApiGatewayDomainName.RegionalDomainName
  RegionalHostedZoneId:
    Description: AwsFederatedRpApiGatewayDomainName.RegionalHostedZoneId
    Value: !GetAtt AwsFederatedRpApiGatewayDomainName.RegionalHostedZoneId
  AwsFederatedRpApiGatewayDomainNameRef:
    Description: Ref AwsFederatedRpApiGatewayDomainName
    Value: !Ref AwsFederatedRpApiGatewayDomainName
  LogGroup:
    Description: The AWS CloudWatch LogGroup name containing Lambda function logs
    Value: !Ref AwsFederatedRpFunctionLogGroup
